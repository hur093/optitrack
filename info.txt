konvexitas osztonzese: sulyozom a pontokat; minel kozelebb az origohoz annal nagyobb a suly; egyebkent explicit konvexitas beleirasa
    semi-explicit konvexitas: create a convex hull using scipy and - using the scipy object's buitl-in method - check the ratio of the points that are inside the hull but outside the cameras' visibility (explicit: no not-seen point is inside the hull)
modify fitness 2 so that it returns a float (something like sigma/tanh function(-1* 'the size of the space') adjusted to always be above 0
furher read the docs and optimize sigma parameter (initial std OF WHAT?)
maybe optimize somehow the initial cameras distribution
DOKUMENTALAS A VEGEN ES VALAMI USER-FRIENDLY INTERFACE!



convexity weight/parameter:
    create hull from seen points
    go through not seen points and record wether they are in the hull
    convexity_param = n_seen/(n_seen+n_notSeenButInHull)
alternative approach: <- faster, might be less accurate
    use hull.volume method to figure out hull's volume
    then estimate seen volume by n_seen/n_all_points * L*W*H

solutions:
    000: no weighing
    001: just centering
    002: just soft convexity
    003: just (0.7) hard convexity
    004: 1 centering + 1 soft convexity
    005: 1 centering + 0.7 hard convexity✅️
    006: 1 centering + 0.8 hard convexity
    007: 1 centering + 0.9 hard convexity
    008: 1 centering + 2 soft convexity + 0.7 hard convexity❌️
    009: 1 centering + 0.4 range + 2.0 spread
    010: first normalised, vanilla (❌️TRASH, deleted)


CasAdi (opti modul) optimalizalo: felhasznalobarat; opti.minimize(fitness fuggveny); subject_to(constraint; linearis kepletnel a 'lagalabb 3 kamera lass'-nal lehet ra szukseg)
supporttol kderul hogy lehet e lenyerni a kezdo poziciot
kepleteke alapjan analitikus megoldas (egyelore hogy csak egy kamera latja)
szorasos osztonzes
quadrantra vonatkoznak a bemenetek, azt tukrozi es az egeszre szamol fitnesst
min 1.5 m magassagban lassanak
    

Quadrant: placing of cameras is symmetric, but tilt angles are freely choosen amongst them
    pos(cam1)=(x, y) => pos(cam2)=(-x, y), ..., pos(cam4)=(-x, -y)
    somehow seperately set angles
    angles??
    return fitness1(...)

old camera vector scheme: (n_cam by 4)
    [[x0, y0, pitch0, yaw0],
      x1, y1, ...]
    ...
    ]                                 -----(.reshape(-1))

new scheme: (n_cam/4 by (1+4)*2)
[[x0, y0, pitch0a, yaw0a, pitch0b, yaw0b, pitch0c, ...]
 [x1, y1, pitch1a, ...]
 ...
]      

szimmetria mindenképp
analitikus megolfás
kezdőpozíciót manuálisan beírni.



    eddigi probléma (miért nem lett jó eredmény): manuálisan írtam a paramétereket amikor a Camera osztályt elkészítettem és ezért úgy írtam meg a konstruktort, hogy fokban kérje a szögeket, ám mire megalkottam a random kamerákat generáló függvényt, fejben már visszatértem az általánosan használt radiánhoz. Ennek eredménye hogy a generált kamerák -pi/2 és pi/2 FOK között generálódtak és így mindegyik kamera pont lefele, a földre nézett.
A súlyozatlan eredeti megoldás szögei 14 kamerára (fokban):
[[-2.835 -0.221]
 [ 1.106  2.134]
 [ 0.098 -1.444]
 [-1.306 -2.658]
 [ 0.555 -0.588]
 [-0.729 -1.807]
 [-0.688  2.639]
 [-1.419  0.46 ]
 [-2.827  1.594]
 [ 1.76   1.968]
 [-0.431 -3.323]
 [-1.074 -4.239]
 [ 1.207 -1.46 ]
 [-0.629 -0.251]]
A súlyozatlan kijavított megoldás szögei 7 kamerára (fokban):
[[-114.33    68.05 ]
 [  60.897  -20.566]
 [  78.69   -46.364]
 [-123.257  -65.061]
 [ 117.316   67.278]
 [  63.733   69.112]
 [ -66.225   67.521]]

08.08.
start git repo and sync it to github using existing code
redrakas{
the optimization functionality and its functions should be wrapped inside a CameraOptimizer class
incorporate as many external functions as possible into the Camera class; what is left should start with an underscore
file handling should be as automatic as possible: create a function to save and load best_vectors along with its metadata: weights, symmetry, rho, ranges, n_cameras. I should be able to give an arbitrary filename to the saved file. It should also be able to create a results folder
}
minigula a kamerakra, ami mutatja hogy hova neznek (az abrazolo fuggvenyt kell modositani)
ellenorizd a gyanusan jo eredmenyt (1 optimalizalt kamera 4 fele tukrozve)
